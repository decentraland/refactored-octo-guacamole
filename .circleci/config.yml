version: 2.0

references:
  .working_directory: &working_directory /tmp/workspace

  .working_directory_root: &working_directory_root
    working_directory: *working_directory

  .attach_root: &attach_root
    attach_workspace:
      at: *working_directory

  .image_kernel: &image_kernel
    - image: circleci/node:14-browsers
      environment:
        BUILD_PATH: /tmp/workspace/Builds/unity

  .unity_image: &unity_image
    - image: decentraland/renderer-build:2019.4
      environment:
        BUILD_TARGET: WebGL
        BUILD_PATH: /tmp/workspace/Builds/unity
        BUILD_NAME: unity

  .all_branches_and_tags: &all_branches_and_tags
    filters:
      branches:
        only: /(.*)/
      tags:
        only: /^\d+\.\d+\.\d+(.*)/ # npm tag + latest

jobs:
  checkout:
    <<: *working_directory_root
    docker:
      - image: circleci/node:14-browsers
        environment:
          # avoid automatic download of LFS files
          GIT_LFS_SKIP_SMUDGE: 1
    steps:
      # install lfs
      - run:
          name: "Install git-lfs"
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
            sudo apt-get update && sudo apt-get install -y git-lfs=2.7.2
            ssh git@github.com git-lfs-authenticate decentraland/refactored-octo-guacamole.git download
            git lfs install
      # checkout the actual code
      - checkout

      # restore cached lfs
      - restore_cache:
          name: Restore large files from CircleCI cache
          keys:
            - git-lfs-{{ .Branch }}
            - git-lfs-master
      - run:
          name: "Download LFS files from GitHub's LFS Storage"
          command: |
            while true; do git reset --hard HEAD && git clean -fd && git lfs pull && break; done
      - save_cache:
          name: Store large files in cache
          key: git-lfs-{{ .Branch }}
          paths:
            - .git/lfs

      # persist to workspace to use in downstream jobs
      - persist_to_workspace:
          root: *working_directory
          paths:
            - "*"

  editmode-tests:
    <<: *working_directory_root
    resource_class: xlarge
    docker: *unity_image
    steps:
      - <<: *attach_root
      - run: &HASH_UNITY_FILES
          name: Get the hash of source files
          command: |
            find Assets -type f \( -not -path '*Plugins*' \) \( -iname \*.unity -o -iname \*.cs -o -iname \*.meta -o -iname \*.xml -o -iname \*.shader -o -iname \*.prefab -o -iname \*.yml -o -iname \*.mat -o -iname \*.json -o -iname \*.js -o -iname \*.jspre  -o -iname \*.jslib  -o -iname \*.hlsl  -o -iname \*.asmdef  -o -iname \*.csproj  -o -iname \*.spriteatlas  \) \( -exec md5sum "$PWD"/{} \; \) | sort > ../.unitysources-checksum
      - restore_cache: &RESTORE_HASHED_UNITY_FILES
          name: Restore hashed files if they exist
          keys:
            - unity-tests-{{ checksum "../.unitysources-checksum" }}
      - restore_cache: &RESTORE_LIBRARY_CACHE
          name: Restore library if exists
          keys:
            - library-{{ .Branch }}
      - run:
          name: Run editmode tests
          command: |
            if [[ -e /tmp/workspace/editmode-logs.txt ]]; then
                exit 0
            else
                bash ci-editmode-test.sh
                exit $?
            fi;
          no_output_timeout: 30m
      - store_artifacts:
          name: Store logs
          path: /tmp/workspace/editmode-logs.txt
      - store_artifacts:
          name: Store test results
          path: /tmp/workspace/editmode-results.xml
      - store_artifacts:
          name: Store test coverage
          path: /tmp/workspace/CodeCoverage
      - store_test_results:
          path: editmode-results.xml
      - save_cache:
          name: Store test results
          key: unity-tests-{{ checksum "../.unitysources-checksum" }}
          paths:
            - /tmp/workspace/editmode-logs.txt
            - /tmp/workspace/TestResources/VisualTests/CurrentTestImages/*.png
      - store_artifacts:
          name: Store visual tests result as artifacts
          path: /tmp/workspace/TestResources/VisualTests/CurrentTestImages

  playmode-tests:
    <<: *working_directory_root
    resource_class: xlarge
    docker: *unity_image
    steps:
      - <<: *attach_root
      - run: *HASH_UNITY_FILES
      - restore_cache: *RESTORE_HASHED_UNITY_FILES
      - restore_cache: *RESTORE_LIBRARY_CACHE
      - run:
          name: Run playmode tests
          command: |
            if [[ -e /tmp/workspace/playmode-logs.txt ]]; then
                exit 0
            else
                bash ci-playmode-test.sh
                exit $?
            fi;
          no_output_timeout: 30m
      - store_test_results:
          path: playmode-results.xml
      - store_test_results:
          path: /tmp/workspace/CodeCoverage/Report
      - store_artifacts:
          name: Store logs
          path: /tmp/workspace/playmode-logs.txt
      - store_artifacts:
          name: Store test results
          path: /tmp/workspace/playmode-results.xml
      - store_artifacts:
          name: Store test coverage
          path: /tmp/workspace/CodeCoverage
      - save_cache:
          name: Store test results
          key: unity-tests-{{ checksum "../.unitysources-checksum" }}
          paths:
            - /tmp/workspace/playmode-logs.txt
            - /tmp/workspace/playmode-results.xml
            - /tmp/workspace/CodeCoverage
            - /tmp/workspace/TestResources/VisualTests/CurrentTestImages/*.png
      - store_artifacts:
          name: Store visual tests result as artifacts
          path: /tmp/workspace/TestResources/VisualTests/CurrentTestImages

  build-unity:
    <<: *working_directory_root
    resource_class: xlarge
    docker: *unity_image
    steps:
      - <<: *attach_root
      - run: *HASH_UNITY_FILES
      - restore_cache: *RESTORE_HASHED_UNITY_FILES
      - restore_cache: *RESTORE_LIBRARY_CACHE
      - run:
          name: Build WebGL
          command: |
            if [[ ! -e ${BUILD_PATH} ]] || [[ ! -n "$(ls -A ${BUILD_PATH})" ]]; then
                mkdir -p ${BUILD_PATH}
                (./ci-build.sh & echo $! > /tmp/workspace/build.pid &)
                pid=`cat /tmp/workspace/build.pid`
                while [ -e /proc/$pid -a /proc/$pid/exe ]; do
                    echo "Running Unity Build..."
                    sleep 60
                done
                cat build-logs.txt
            fi;
      - save_cache:
          name: Store decentraland-renderer build
          key: unity-build-{{ checksum "../.unitysources-checksum" }}
          paths:
            - /tmp/workspace/Builds/
      - save_cache:
          name: Store library
          key: library-{{ .Branch }}
          paths:
            - /tmp/workspace/Library
      - store_artifacts:
          name: Store logs
          path: /tmp/build-logs.txt

      # persist to workspace to use in downstream jobs
      - persist_to_workspace:
          root: *working_directory
          paths:
            - Builds

  build-js-interface:
    <<: *working_directory_root
    docker: *image_kernel

    steps:
      - <<: *attach_root
      - run:
          working_directory: &node_workspace /tmp/workspace/browser-interface
          name: find unity artifacts
          command: find /tmp/workspace/Builds/unity
      - run:
          working_directory: *node_workspace
          name: npm clean install
          command: npm ci
      - run:
          working_directory: *node_workspace
          name: npm run build
          command: npm run build
      - run:
          working_directory: *node_workspace
          name: npm run test
          command: npm run test
      - run:
          working_directory: *node_workspace
          name: clear dev dependencies
          command: npm ci --only=production

      # persist to workspace to use in downstream jobs
      - persist_to_workspace:
          root: *node_workspace
          paths:
            - *node_workspace

  publish-renderer:
    <<: *working_directory_root
    docker: *image_kernel

    steps:
      - <<: *attach_root
      - run:
          name: Set up NPM access tokens
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          when: on_success
      - run:
          working_directory: /tmp/workspace/browser-interface
          name: npm run publish
          command: npm run publish
workflows:
  version: 2
  build-deploy:
    jobs:
      - checkout:
          <<: *all_branches_and_tags

      - playmode-tests:
          <<: *all_branches_and_tags
          requires:
            - checkout
      - editmode-tests:
          <<: *all_branches_and_tags
          requires:
            - checkout
      - build-unity:
          <<: *all_branches_and_tags
          requires:
            - checkout

      - build-js-interface:
          <<: *all_branches_and_tags
          requires:
            - build-unity

      - publish-renderer:
          filters:
            branches:
              only:
                - master
            tags:
              only: /^\d+\.\d+\.\d+(.*)/ # npm tag + latest
          requires:
            - build-unity
            - build-js-interface
            - playmode-tests
            - editmode-tests
